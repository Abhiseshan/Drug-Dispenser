module VGA(clock, reset, VGA_CLK, VGA_HS, VGA_VS, VGA_BLANK_N, VGA_SYNC_N, VGA_R, VGA_G, VGA_B);
	
	input clock, reset;
	
	output			VGA_CLK;   				//	VGA Clock
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK_N;				//	VGA BLANK
	output			VGA_SYNC_N;				//	VGA SYNC
	output	[9:0]	VGA_R;   				//	VGA Red[9:0]
	output	[9:0]	VGA_G;	 				//	VGA Green[9:0]
	output	[9:0]	VGA_B;   				//	VGA Blue[9:0}

	wire [14:0] address;
	
	// Create the colour, x, y and writeEn wires that are inputs to the controller.

	wire [2:0] colour;
	wire [7:0] x;
	wire [6:0] y;
	wire writeEn;
	
	always@(posedge clock) 
	begin
		x<= x+1;
		if(x==160)begin
			x<=0;
			y<= y+1; 
		end
		if(y==120)begin
			y<=0;
			plot<=1;   
		end
	end

	vga_address_translator user_input_translator(.x(x), .y(y), .mem_address(address));

	lockedMem lockedImage(address, clock, 0, 0, lockedColor);
	unlockedMem unlockedImage(address, clock, 0, 0, unlockedColor);
	intruderAlertMem intruder(address, clock, 0, 0, intruderAlertColor);

	always@(*)
	begin
		if(colorSelect==unlocked)
			color<= unlockedColor;
		if(colorSelect==locked)
			color<= lockedColor;
		if(colorSelect==intruderAlert)
			color<= intruderAlertColor;
	end
	
		vga_adapter VGA(
			.resetn(reset),
			.clock(clock),
			.colour(colour),
			.x(x),
			.y(y),
			.plot(writeEn),
			/* Signals for the DAC to drive the monitor.  */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));
		defparam VGA.RESOLUTION = "160x120";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "black.mif";
endmodule
